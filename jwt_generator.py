#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.6 on Tue Jun 30 17:30:54 2020
#

import wx
import sys
import traceback
import os
import lib_jwt_generator as jwt

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MainFrame(wx.Frame):
  def __init__(self, *args, **kwds):
    # begin wxGlade: MainFrame.__init__
    kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
    wx.Frame.__init__(self, *args, **kwds)
    self.SetSize((600, 800))
    self.checkbox_1 = wx.CheckBox(self, wx.ID_ANY, "Add iat and exp")
    self.spin_ctrl_1 = wx.SpinCtrl(self, wx.ID_ANY, "3600", min=0, max=86400)
    self.text_ctrl_1 = wx.TextCtrl(self, wx.ID_ANY, "{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"admin\": true\n}", style=wx.TE_MULTILINE | wx.TE_WORDWRAP)
    self.text_ctrl_2 = wx.TextCtrl(self, wx.ID_ANY, "private.rsa256.key")
    self.button_4 = wx.Button(self, wx.ID_ANY, "...", style=wx.BU_EXACTFIT)
    self.text_ctrl_3 = wx.TextCtrl(self, wx.ID_ANY, "public.rsa256.key")
    self.button_5 = wx.Button(self, wx.ID_ANY, "...", style=wx.BU_EXACTFIT)
    self.text_ctrl_4 = wx.TextCtrl(self, wx.ID_ANY, "Token here...", style=wx.TE_CHARWRAP | wx.TE_MULTILINE)
    self.button_6 = wx.Button(self, wx.ID_ANY, "Decode Jwt Token")
    self.button_1 = wx.Button(self, wx.ID_ANY, "Encode Jwt Token")
    self.button_2 = wx.Button(self, wx.ID_ANY, "Copy Token")
    self.button_3 = wx.Button(self, wx.ID_EXIT, "")

    self.__set_properties()
    self.__do_layout()

    self.Bind(wx.EVT_BUTTON, self.on_open_private_key_file, self.button_4)
    self.Bind(wx.EVT_BUTTON, self.on_open_public_key_file, self.button_5)
    self.Bind(wx.EVT_BUTTON, self.on_decode_jwt_token, self.button_6)
    self.Bind(wx.EVT_BUTTON, self.on_encode_jwt_token, self.button_1)
    self.Bind(wx.EVT_BUTTON, self.on_copy_token, self.button_2)
    self.Bind(wx.EVT_BUTTON, self.on_exit, self.button_3)
    # end wxGlade

  def __set_properties(self):
    # begin wxGlade: MainFrame.__set_properties
    self.SetTitle("Jwt Generator - RSA256 only")
    self.checkbox_1.SetValue(1)
    # end wxGlade

  def __do_layout(self):
    # begin wxGlade: MainFrame.__do_layout
    sizer_1 = wx.FlexGridSizer(2, 1, 0, 0)
    sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
    sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
    sizer_7 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Token"), wx.VERTICAL)
    sizer_3 = wx.BoxSizer(wx.VERTICAL)
    sizer_6 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Key"), wx.VERTICAL)
    grid_sizer_2 = wx.FlexGridSizer(2, 3, 5, 0)
    sizer_5 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Body"), wx.VERTICAL)
    sizer_4 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Options"), wx.VERTICAL)
    grid_sizer_1 = wx.FlexGridSizer(4, 2, 0, 0)
    label_1 = wx.StaticText(self, wx.ID_ANY, "Type:")
    grid_sizer_1.Add(label_1, 1, wx.ALL | wx.EXPAND, 5)
    label_2 = wx.StaticText(self, wx.ID_ANY, "JWT")
    grid_sizer_1.Add(label_2, 1, wx.ALL | wx.EXPAND, 5)
    label_3 = wx.StaticText(self, wx.ID_ANY, "Algorithm: ")
    grid_sizer_1.Add(label_3, 1, wx.ALL | wx.EXPAND, 5)
    label_4 = wx.StaticText(self, wx.ID_ANY, "RS256")
    grid_sizer_1.Add(label_4, 1, wx.ALL | wx.EXPAND, 5)
    label_6 = wx.StaticText(self, wx.ID_ANY, "IssuedAt and Expire:")
    grid_sizer_1.Add(label_6, 1, wx.ALL | wx.EXPAND, 5)
    grid_sizer_1.Add(self.checkbox_1, 1, wx.ALL | wx.EXPAND, 5)
    label_5 = wx.StaticText(self, wx.ID_ANY, "Expire: (seconds)")
    grid_sizer_1.Add(label_5, 1, wx.ALL | wx.EXPAND, 5)
    grid_sizer_1.Add(self.spin_ctrl_1, 1, wx.EXPAND | wx.LEFT | wx.RIGHT, 5)
    grid_sizer_1.AddGrowableCol(1)
    sizer_4.Add(grid_sizer_1, 1, wx.BOTTOM | wx.EXPAND, 5)
    sizer_3.Add(sizer_4, 0, wx.ALL | wx.EXPAND, 5)
    sizer_5.Add(self.text_ctrl_1, 29, wx.ALL | wx.EXPAND, 5)
    sizer_3.Add(sizer_5, 1, wx.EXPAND | wx.LEFT | wx.RIGHT, 5)
    label_7 = wx.StaticText(self, wx.ID_ANY, "Private: *")
    grid_sizer_2.Add(label_7, 1, wx.ALL | wx.EXPAND, 5)
    grid_sizer_2.Add(self.text_ctrl_2, 2, wx.EXPAND, 5)
    grid_sizer_2.Add(self.button_4, 1, wx.LEFT | wx.RIGHT, 5)
    label_8 = wx.StaticText(self, wx.ID_ANY, "Public:")
    grid_sizer_2.Add(label_8, 1, wx.ALL | wx.EXPAND, 5)
    grid_sizer_2.Add(self.text_ctrl_3, 2, wx.EXPAND, 5)
    grid_sizer_2.Add(self.button_5, 1, wx.LEFT | wx.RIGHT, 5)
    grid_sizer_2.AddGrowableCol(1)
    sizer_6.Add(grid_sizer_2, 1, wx.BOTTOM | wx.EXPAND, 5)
    sizer_3.Add(sizer_6, 0, wx.ALL | wx.EXPAND, 5)
    sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
    sizer_7.Add(self.text_ctrl_4, 1, wx.ALL | wx.EXPAND, 5)
    sizer_2.Add(sizer_7, 1, wx.ALL | wx.EXPAND, 5)
    sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
    sizer_8.Add(self.button_6, 1, wx.ALL | wx.EXPAND, 5)
    sizer_8.Add(self.button_1, 1, wx.ALL | wx.EXPAND, 5)
    sizer_8.Add(self.button_2, 1, wx.ALL | wx.EXPAND, 5)
    sizer_8.Add(self.button_3, 1, wx.ALL | wx.EXPAND, 5)
    sizer_1.Add(sizer_8, 1, wx.EXPAND, 0)
    self.SetSizer(sizer_1)
    sizer_1.AddGrowableRow(0)
    sizer_1.AddGrowableCol(0)
    self.Layout()
    self.Centre()
    # end wxGlade

  def on_open_private_key_file(self, event):  # wxGlade: MainFrame.<event_handler>
    path = self.pick_file("Choose Private Key RSA256 File...")
    if path != None:
        self.text_ctrl_2.SetValue(path)
    event.Skip()

  def on_open_public_key_file(self, event):  # wxGlade: MainFrame.<event_handler>
    path = self.pick_file("Choose Public Key RSA256 File...")
    if path != None:
        self.text_ctrl_3.SetValue(path)
    event.Skip()

  def on_encode_jwt_token(self, event):  # wxGlade: MainFrame.<event_handler>
    body = self.text_ctrl_1.GetValue()
    put_iat_exp = self.checkbox_1.GetValue()
    exp_delta = self.spin_ctrl_1.GetValue()
    private_key_file_name = self.text_ctrl_2.GetValue()
    encoded = jwt.encode_jwt_RS256(body, put_iat_exp, exp_delta, private_key_file_name)
    self.text_ctrl_4.SetValue(encoded)
    event.Skip()

  def on_copy_token(self, event):  # wxGlade: MainFrame.<event_handler>
    token = self.text_ctrl_4.GetValue()
    if wx.TheClipboard.Open():
        wx.TheClipboard.SetData(wx.TextDataObject(token))
        wx.TheClipboard.Close()
    event.Skip()

  def on_exit(self, event):  # wxGlade: MainFrame.<event_handler>
    self.Close()

  def on_decode_jwt_token(self, event):  # wxGlade: MainFrame.<event_handler>
    token = self.text_ctrl_4.GetValue()
    public_key_file_name = self.text_ctrl_3.GetValue()
    try:
        body = jwt.decode_jwt_RS256(token, public_key_file_name)
        self.text_ctrl_1.SetValue(body)
    except jwt.jwt.ExpiredSignatureError:
        body = jwt.decode_Jwt_RS256_no_validation(token, public_key_file_name)
        self.text_ctrl_1.SetValue(body)
        raise
    event.Skip()

  def pick_file(self, msg):
    dlg = wx.FileDialog(self, message=msg, defaultDir=os.getcwd(), style=wx.FD_OPEN | wx.FD_CHANGE_DIR)
    if dlg.ShowModal() == wx.ID_OK:
        paths = dlg.GetPaths()
        path = paths[0]
    else:
        path = None
    dlg.Destroy()
    return path


# end of class MainFrame

class ExceptionDialog():

    def __init__(self, msg):
        wx.MessageBox(msg, 'Error!', wx.OK | wx.ICON_ERROR)

# end of class ExceptionDialog

def MyExceptionHook(etype, value, trace):
    """
    https://www.blog.pythonlibrary.org/2014/01/31/wxpython-how-to-catch-all-exceptions/
    Handler for all unhandled exceptions.
    :param `etype`: the exception type (`SyntaxError`, `ZeroDivisionError`, etc...);
    :type `etype`: `Exception`
    :param string `value`: the exception error message;
    :param string `trace`: the traceback header, if any (otherwise, it prints the
     standard Python header: ``Traceback (most recent call last)``.
    """
    frame = wx.GetApp().GetTopWindow()
    tmp = traceback.format_exception(etype, value, trace)
    exception = "".join(tmp)
    dlg = ExceptionDialog(exception)
    dlg.ShowModal()
    dlg.Destroy()

# end of function MyExceptionHook

class JwtGenerator(wx.App):
  def OnInit(self):
    self.frame = MainFrame(None, wx.ID_ANY, "")
    sys.excepthook = MyExceptionHook
    self.SetTopWindow(self.frame)
    self.frame.Show()
    return True

# end of class JwtGenerator

if __name__ == "__main__":
  jwt_generator = JwtGenerator(0)
  jwt_generator.MainLoop()
